{"version":3,"sources":["components/ListItem.js","components/Title.js","components/texts.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","listItems","items","map","item","className","key","type","value","text","onChange","e","changeValue","target","onClick","deleteItem","Title","title","Texts","handleRef","posts","current","focus","handleInput","setState","currentItem","Date","now","addItems","newItem","state","newItems","preventDefault","filterItems","filter","React","createRef","this","onSubmit","htmlFor","name","ref","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qNAsBeA,MAnBf,SAAkBC,GACd,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GACxB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,2BACI,2BAAOC,KAAK,OAAOC,MAAOJ,EAAKK,KAAMC,SAAU,SAACC,GAAKX,EAAMY,YAAYD,EAAEE,OAAOL,MAAMJ,EAAKE,QAC3F,0BAAMD,UAAU,cAAcS,QAAS,kBAAId,EAAMe,WAAWX,EAAKE,OAAjE,OAA8E,kBAAC,IAAD,MAA9E,UAFJ,OAGI,0BAAMD,UAAU,aAAa,kBAAC,IAAD,YAIzC,OACI,6BACKJ,ICdAe,EAAQ,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACnB,OACI,yBAAKZ,UAAU,SACX,4BAAKY,KCuFFC,E,kDAtFX,WAAYlB,GAAQ,IAAD,8BACf,cAAMA,IAWVmB,UAAY,WACR,EAAKC,MAAMC,QAAQC,SAbJ,EAgBnBC,YAAa,SAAAZ,GACT,EAAKa,SAAS,CACVC,YAAY,CACRhB,KAAKE,EAAEE,OAAOL,MACdF,IAAIoB,KAAKC,UApBF,EAyBnBC,SAAW,SAAAjB,GACP,IAAMkB,EAAU,EAAKC,MAAML,YAC3B,GAAkB,KAAfI,EAAQpB,KAAU,CACjB,IAAMsB,EAAQ,sBAAO,EAAKD,MAAM5B,OAAlB,CAAwB2B,IACtC,EAAKL,SAAS,CACVtB,MAAM6B,EACNN,YAAY,CACRhB,KAAK,GACLH,IAAI,MAOhBK,EAAEqB,kBAxCa,EA2CnBjB,WAAa,SAACT,GACV,IAAM2B,EAAc,EAAKH,MAAM5B,MAAMgC,QAAO,SAAA9B,GAAI,OAAGA,EAAKE,MAAQA,KAChE,EAAKkB,SAAS,CACVtB,MAAM+B,KA9CK,EAiDnBrB,YAAY,SAACH,EAAKH,GACd,IAAMJ,EAAQ,EAAK4B,MAAM5B,MACzBA,EAAMC,KAAI,SAAAC,GACHA,EAAKE,MAAMA,IACVF,EAAKK,KAAKA,MAGlB,EAAKe,SAAS,CACVtB,MAAMA,KAtDV,EAAK4B,MAAQ,CACT5B,MAAM,GACNuB,YAAY,CACRhB,KAAK,GACLH,IAAI,KAGZ,EAAKc,MAAOe,IAAMC,YAVH,E,gEAiEfC,KAAKlB,c,+BAGC,IAAD,EACsBkB,KAAKP,MAAzBL,EADF,EACEA,YAAYvB,EADd,EACcA,MACnB,OACI,yBAAKG,UAAU,YAEX,kBAAC,EAAD,CAAOY,MAAM,YACb,0BAAMqB,SAAUD,KAAKT,UACjB,2BAAOW,QAAQ,UAAUzB,QAASuB,KAAKlB,WAAvC,eAAqE,6BACrE,2BAAOZ,KAAK,OAAOiC,KAAK,UAAUC,IAAKJ,KAAKjB,MAAOZ,MAAOiB,EAAYhB,KAAMC,SAAU2B,KAAKd,cAC3F,4BAAQhB,KAAK,UAAb,SAEJ,kBAAC,EAAD,CAAWL,MAAOA,EAAOa,WAAYsB,KAAKtB,WAAYH,YAAayB,KAAKzB,mB,GAhFpE8B,aCcLC,MAZf,WACE,OACE,yBAAKtC,UAAU,OACb,kBAAC,EAAD,QCEcuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.07fc0184.chunk.js","sourcesContent":["import React from 'react'\r\nimport {FaTrashAlt,FaRegEdit } from 'react-icons/fa';\r\n\r\nfunction ListItem(props) {\r\n    const items = props.items\r\n    const listItems = items.map(item=>{\r\n        return <div className=\"list\" key={item.key}>\r\n            <p>\r\n                <input type=\"text\" value={item.text} onChange={(e)=>{props.changeValue(e.target.value,item.key)}} />\r\n                <span className=\"icon-delete\" onClick={()=>props.deleteItem(item.key)} >&nbsp;<FaTrashAlt />Delete</span>&nbsp;\r\n                <span className=\"icon-edit\" ><FaRegEdit/></span>\r\n            </p>\r\n        </div>\r\n    })\r\n    return (\r\n        <div>\r\n            {listItems}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListItem\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nexport const Title = ({title}) => {\r\n    return (\r\n        <div className=\"title\" >\r\n            <h2>{title}</h2>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport ListItem from './ListItem'\r\nimport { Title } from './Title'\r\n\r\n\r\nclass Texts extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            items:[],\r\n            currentItem:{\r\n                text:'',\r\n                key:''\r\n            }\r\n        }\r\n        this.posts= React.createRef()\r\n    }\r\n    handleRef = () =>{\r\n        this.posts.current.focus()\r\n    }\r\n\r\n    handleInput= e =>{\r\n        this.setState({\r\n            currentItem:{\r\n                text:e.target.value,\r\n                key:Date.now()\r\n            }\r\n        })\r\n    }\r\n\r\n    addItems = e =>{\r\n        const newItem = this.state.currentItem\r\n        if(newItem.text!==''){\r\n            const newItems = [...this.state.items,newItem]\r\n            this.setState({\r\n                items:newItems,\r\n                currentItem:{\r\n                    text:'',\r\n                    key:''\r\n                }\r\n            })\r\n        }\r\n\r\n      \r\n        \r\n        e.preventDefault()\r\n    }\r\n\r\n    deleteItem = (key) =>{\r\n        const filterItems = this.state.items.filter(item=> item.key !== key);\r\n        this.setState({\r\n            items:filterItems\r\n        })\r\n    }\r\n    changeValue=(text,key)=>{\r\n        const items = this.state.items\r\n        items.map(item=>{\r\n            if(item.key===key){\r\n                item.text=text\r\n            }\r\n        })\r\n        this.setState({\r\n            items:items\r\n        })\r\n\r\n    }\r\n\r\n  \r\n\r\n    componentDidMount(){\r\n        this.handleRef()\r\n    }\r\n\r\n    render() {\r\n        const {currentItem,items}= this.state\r\n        return (\r\n            <div className=\"postBody\">\r\n\r\n                <Title title=\"Welcome\"/>\r\n                <form onSubmit={this.addItems}>\r\n                    <label htmlFor=\"myposts\" onClick={this.handleRef}>First Posts</label><br/>\r\n                    <input type=\"text\" name=\"myposts\" ref={this.posts} value={currentItem.text} onChange={this.handleInput}/>\r\n                    <button type=\"submit\" >Post</button>\r\n                </form>\r\n                <ListItem  items={items} deleteItem={this.deleteItem} changeValue={this.changeValue}/>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Texts\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Texts from './components/texts';\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Texts/>\n  \n     \n     \n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}